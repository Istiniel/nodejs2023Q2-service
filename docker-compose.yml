version: '1'
services:
  node:
    build: .
    networks:
      - backend
    ports:
      - ${HTTP_PORT}:${HTTP_PORT}
    depends_on:
      postgres:
        condition: service_started
    env_file:
      - .env
    restart: unless-stopped
    environment:
      HTTP_PORT: ${HTTP_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      CRYPT_SALT: ${CRYPT_SALT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_SECRET_REFRESH_KEY: ${JWT_SECRET_REFRESH_KEY}
      TOKEN_EXPIRE_TIME: ${TOKEN_EXPIRE_TIME}
      TOKEN_REFRESH_EXPIRE_TIME: ${TOKEN_REFRESH_EXPIRE_TIME}
    volumes:
      - .:/usr/app/dev/
      - /usr/app/dev/node_modules/
  postgres:
    build: ./src/db/
    networks:
      - backend
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  node:
  postgres:
networks:
  backend:
    driver: bridge
    name: backend
